biocLite("rhdf5")
library(rhdf5)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "4515678781d9d506f77d",
secret = "45d2dc9f160fcd476b4b9028e4504432aa9f9b76")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "4515678781d9d506f77d",
secret = "45d2dc9f160fcd476b4b9028e4504432aa9f9b76")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "4515678781d9d506f77d",
secret = "45d2dc9f160fcd476b4b9028e4504432aa9f9b76")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
#req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
#top_for_status(req)
#content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "d7b992bf67eddb0acb42",
secret = "39c4ab9b75d24bcf60a5d011ed7ca9db477cf29a")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
#gtoken <- config(token = github_token)
#req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
#stop_for_status(req)
#content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
top_for_status(req)
content(req)
install.packages("httpuv")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "d7b992bf67eddb0acb42",
secret = "39c4ab9b75d24bcf60a5d011ed7ca9db477cf29a")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "d7b992bf67eddb0acb42",
secret = "39c4ab9b75d24bcf60a5d011ed7ca9db477cf29a")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "d7b992bf67eddb0acb42", "39c4ab9b75d24bcf60a5d011ed7ca9db477cf29a
Revoke all user tokens")
#Use http://localhost:1410 as the callback url
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "d7b992bf67eddb0acb42", "39c4ab9b75d24bcf60a5d011ed7ca9db477cf29a
Revoke all user tokens")
#Use http://localhost:1410 as the callback url
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
# curl -u Access Token:x-oauth-basic "https://api.github.com/users/jtleek/repos"
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
answer1 <- c()
for (i in 1:length(repo_list)) {
repo <- repo_list[[i]]
if (repo$name == "datasharing") {
answer1 = repo
break
}
}
# Find OAuth settings for github:
# http://developer.github.com/v3/oauth/
github <- oauth_endpoints("github")
# Replace your key and secret below.
myapp <- oauth_app("github",
key = "319cffb9580b74b3e3fc",
secret = "147be6cc25e9a526f22dc19df75a2c1d47340ea5")
# Get OAuth credentials
github_token <- oauth2.0_token(github, myapp)
# Use the API
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
repo_list <- content(req)
answer1 <- c()
for (i in 1:length(repo_list)) {
repo <- repo_list[[i]]
if (repo$name == "datasharing") {
answer1 = repo
break
}
}
# Expected output: The repository 'datasharing' was created at 2013-11-07T13:25:07Z
if (length(answer1) == 0) {
msg("No such repository found: 'datasharing'")
} else {
msg("The repository 'datasharing' was created at", answer1$created_at)
}
# Find OAuth settings for github:
# http://developer.github.com/v3/oauth/
github <- oauth_endpoints("github")
# Replace your key and secret below.
myapp <- oauth_app("github",
key = "d7b992bf67eddb0acb42",
secret = "39c4ab9b75d24bcf60a5d011ed7ca9db477cf29a
Revoke all user tokens")
# Get OAuth credentials
github_token <- oauth2.0_token(github, myapp)
# Use the API
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
repo_list <- content(req)
answer1 <- c()
for (i in 1:length(repo_list)) {
repo <- repo_list[[i]]
if (repo$name == "datasharing") {
answer1 = repo
break
}
}
# Expected output: The repository 'datasharing' was created at 2013-11-07T13:25:07Z
if (length(answer1) == 0) {
msg("No such repository found: 'datasharing'")
} else {
msg("The repository 'datasharing' was created at", answer1$created_at)
}
# Find OAuth settings for github:
# http://developer.github.com/v3/oauth/
github <- oauth_endpoints("github")
# Replace your key and secret below.
myapp <- oauth_app("github",
key = "d7b992bf67eddb0acb42",
secret = "39c4ab9b75d24bcf60a5d011ed7ca9db477cf29a
Revoke all user tokens")
# Get OAuth credentials
github_token <- oauth2.0_token(github, myapp)
# Use the API
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
repo_list <- content(req)
answer1 <- c()
for (i in 1:length(repo_list)) {
repo <- repo_list[[i]]
if (repo$name == "datasharing") {
answer1 = repo
break
}
}
# Expected output: The repository 'datasharing' was created at 2013-11-07T13:25:07Z
if (length(answer1) == 0) {
msg("No such repository found: 'datasharing'")
} else {
msg("The repository 'datasharing' was created at", answer1$created_at)
}
> repo_list <- content(req)
>
> answer1 <- c()
> for (i in 1:length(repo_list)) {
+     repo <- repo_list[[i]]
+     if (repo$name == "datasharing") {
+         answer1 = repo
+         break
+     }
+ }
> gtoken <- config(token = github_token)
> req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
> stop_for_status(req)
Error: Unauthorized (HTTP 401).
> repo_list <- content(req)
>
> answer1 <- c()
> for (i in 1:length(repo_list)) {
+     repo <- repo_list[[i]]
+     if (repo$name == "datasharing") {
+         answer1 = repo
+         break
+     }
+ }
Error in repo$name : $ operator is invalid for atomic vectors
>
> # Expected output: The repository 'datasharing' was created at 2013-11-07T13:25:07Z
> if (length(answer1) == 0) {
+     msg("No such repository found: 'datasharing'")
+ } else {
+     msg("The repository 'datasharing' was created at", answer1$created_at)
+ }
Error:
# Find OAuth settings for github:
# http://developer.github.com/v3/oauth/
github <- oauth_endpoints("github")
# Replace your key and secret below.
myapp <- oauth_app("github",
key = "d7b992bf67eddb0acb42",
secret = "39c4ab9b75d24bcf60a5d011ed7ca9db477cf29a
Revoke all user tokens")
# Get OAuth credentials
github_token <- oauth2.0_token(github, myapp)
# Use the API
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
repo_list <- content(req)
answer1 <- c()
for (i in 1:length(repo_list)) {
repo <- repo_list[[i]]
if (repo$name == "datasharing") {
answer1 = repo
break
}
}
# Expected output: The repository 'datasharing' was created at 2013-11-07T13:25:07Z
if (length(answer1) == 0) {
msg("No such repository found: 'datasharing'")
} else {
msg("The repository 'datasharing' was created at", answer1$created_at)
}
packages <- c("data.table", "sqldf")
sapply(packages, require, character.only=TRUE, quietly=TRUE
library(httr)
require(httpuv)
require(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("testapp", "d7b992bf67eddb0acb42", secret="39c4ab9b75d24bcf60a5d011ed7ca9db477cf29a")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
acs
sqldf("select * from acs where AGEP < 50")
library(sqldf)
install.packages("sqldf")
sqldf("select pwgtp1 from acs")
library(sqldf)
sqldf("select pwgtp1 from acs")
sqldf("select * from acs where AGEP < 50")
sqldf("select * from acs")
sqldf("select pwgtp1 from acs where AGEP < 50")
unique(acs$AGEP)
sqldf("select AGEP where unique from acs")
sqldf("select distinct pwgtp1 from acs")
sqldf("select unique AGEP from acs")
sqldf("select distinct AGEP from acs")
sqldf("select unique AGEP from acs")
sqldf("select distinct pwgtp1 from acs")
sqldf("select AGEP where unique from acs")
unique(acs$AGEP)
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
require(httr)
require(XML)
htmlCode <- GET("http://biostat.jhsph.edu/~jleek/contact.html")
content <- content(htmlCode, as="text")
htmlParsed <- htmlParse(content, asText=TRUE)
xpathSApply(htmlParsed, "//title", xmlValue)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n=10)
w <- c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12", "filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler", "sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header=FALSE, skip=4, col.names=colNames)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
fname <- "wksst8110.for"
download_if_not_exists(fname, "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
# column sequence: 5x empty space, SST column, SSTA column
col_seq <- c(-5, 4, 4)
# rows: skip first four lines
# cols (left to right):
#   empty space (-1)
#   nine characters (9)
#   etc.
df <- read.fwf(fname,
widths = c(-1, 9, col_seq, col_seq, col_seq, col_seq),
skip = 4)
answer5 <- sum(df[, 4])
# Expected output: "The sum of numbers in the fourth column is 32426.7"
msg("The sum of numbers in the fourth column is", answer5)
install.packages("knitr")
install.packages("kernlab")
install.packages("slidify")
install.packages("slidify")
install.packages(slidify)
mydata <- read.csv("activity.csv", sep = ",")
getwd()
getwd()
mydata <- read.csv("activity.csv", sep = ",")
setwd("~/Documents/RPrograms/RepResearch")
mydata <- read.csv("activity.csv", sep = ",")
head(mydata)
import(dplyr)
import(lubridate)
mydata <- read.csv("activity.csv", sep = ",")
library(dplyr)
library(lubridate)
mydata <- read.csv("activity.csv", sep = ",")
mydata$date <- ydm(mydata$date)
library(dplyr)
library(lubridate)
mydata <- read.csv("activity.csv", sep = ",")
mydata$date <- ymd(mydata$date)
head(mydata)
aggregate(mydata$mean, by= mydata$date)
aggregate(mydata$mean, by= mydata$date, mean)
head(mydata)
aggregate(as.numeric(mydata$mean), by= mydata$date, mean)
library(dplyr)
library(lubridate)
library(knitr)
mydata <- read.csv("activity.csv", sep = ",")
mydata$date <- ymd(mydata$date)
mydata <- mydata[!is.na(mydata$steps), ]
head(mydata)
aggregate(as.numeric(mydata$mean), by= mydata$date, mean)
aggregate(as.numeric(mydata$steps), by= mydata$date, mean)
aggregate(as.numeric(mydata$steps), by= as.list(mydata$date), mean)
aggregate(as.numeric(mydata$steps), by= list(mydata$date), mean)
aggregate(as.numeric(mydata$steps), by= list(mydata$date), sum)
sum_data <- aggregate(as.numeric(mydata$steps), by= list(mydata$date), sum)
names(sum_data) <- c("date", "sum")
head(sum_data)
time_series_data <- aggregate(mydata$steps, by = mydata$interval, mean)
time_series_data <- aggregate(mydata$steps, by = list(mydata$interval), mean)
head(times_series_data)
head(time_series_data)
time_series_data <- aggregate(mydata$steps, by = list(mydata$interval), mean)
names(time_series_data) <- c("interval", "steps")
length(mydata_unfiltered[is.na(mydata_unfiltered$steps),])
imputed_data <- mydata_unfiltered
for(ind in 1:nrow(imputed_data)){
if(is.na(imputed_data$steps[in])){
interval_value <- imputed_data$interval[i]
}
}
imputed_data <- mydata_unfiltered
for(ind in 1:nrow(imputed_data)){
if(is.na(imputed_data$steps[in])){
interval_value <- imputed_data$interval[i]
}
}
imputed_data <- mydata_unfiltered
for(index in 1:nrow(imputed_data)){
if(is.na(imputed_data$steps[index])){
interval <- imputed_data$interval[i]
}
}
imputed_data <- mydata_unfiltered
for(index in 1:nrow(imputed_data)){
if(is.na(imputed_data$steps[index])){
interval <- imputed_data$interval[i]
}
}
imputed_data <- mydata_unfiltered
for(index in 1:nrow(imputed_data)){
if(is.na(imputed_data$steps[index])){
interval <- imputed_data$interval[index]
imputed_data$steps[index] <- time_series_data$interval[interval]
}
}
imputed_data <- mydata_unfiltered
for(index in 1:nrow(imputed_data)){
if(is.na(imputed_data$steps[index])){
interval <- imputed_data$interval[index]
imputed_data$steps[index] <- time_series_data$interval[interval]
}
}
imputed_data <- mydata_unfiltered
for(index in 1:nrow(imputed_data)){
if(is.na(imputed_data$steps[index])){
interval <- imputed_data$interval[index]
imputed_data$steps[index] <- time_series_data$interval[interval]
}
}
interval
imputed_data <- mydata_unfiltered
for(index in 1:nrow(imputed_data)){
if(is.na(imputed_data$steps[index])){
inter <- imputed_data$interval[index]
imputed_data$steps[index] <- time_series_data$interval[inter]
}
}
imputed_data <- mydata_unfiltered
for(index in 1:nrow(imputed_data)){
if(is.na(imputed_data$steps[index])){
inter <- imputed_data$interval[index]
stepval <- time_series_data[time_series_data$interval== inter,]
}
}
stepval
sum(is.na(imputed_data$steps))
